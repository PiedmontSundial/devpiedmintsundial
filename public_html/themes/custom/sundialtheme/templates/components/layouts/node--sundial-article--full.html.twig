{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
<article{{ attributes }}>
  <div id="Title-wrapper" class="row">
    <div class="article-side-mark-container">
      <div class="article-yellow-side-mark article-title-side-mark">
      </div>
    </div>
    <div class="article-title-box">
      <h1 class="title-box block-title-sundial-article">
        {{ node.title.value }}
      </h1>
    </div>
  </div>
  <script>
    var subBoxes = document.getElementsByClassName("article-title-box");
	  var subSideBoxes = document.getElementsByClassName("article-title-side-mark");
	  for(var i = 0; i < subBoxes.length; i++) {
	    var height = subBoxes[i].offsetHeight;
	    subSideBoxes[i].style.height = height + "px";
	  }
    window.addEventListener("resize", function() {
      var subBoxes = document.getElementsByClassName("article-title-box");
      var subSideBoxes = document.getElementsByClassName("article-title-side-mark");
      for(var i = 0; i < subBoxes.length; i++) {
	    var height = subBoxes[i].offsetHeight;
	    subSideBoxes[i].style.height = height + "px";
      }
    });
  </script>
  
  {% if node.field_subhead_1.value|length %}
    <div class="subhead-1">
      {{ content.field_subhead_1 }}
    </div>
  {% endif %}
  
  {% if node.field_subhead_2.value|length %}
    <div class="subhead-2">
      {{ content.field_subhead_2 }}
    </div>
  {% endif %}
  <br>
  <footer>
    <div{{ author_attributes }}>
      by <span class="author">{{ node.field_author.entity.title.value }}</span>
      <span class="article-date float-right">{{ node.field_date_filed.value|date("F j, Y g:i a", "America/New_York") }}
      </span>
    </div>
    {% set imageCount = 0 %}
    {% for image in node.field_article_images %}
      {% if image.entity.field_image.entity.uri.value != '' %}
        {% set imageCount = imageCount + 1 %}
      {% endif %}
    {% endfor %}
		<br>
    {% if imageCount %}
      <div class="article-first-image">
        <img src="{{ file_url(node.field_article_images.0.entity.field_image.entity.uri.value) }}"
          alt="{{ node.field_article_images.0.entity.field_image.entity.alt.value }}" class="img-fluid">
        <div class="img-caption">{{ node.field_article_images.0.entity.field_image_caption.value|raw }}</div>
        <div class="img-source">{{ node.field_article_images.0.entity.field_image_source.value }}</div>
      </div>
    {% endif %}
    <br><br>
    
    {% if node.field_leader.value|length %}
      <div class="article-body">
        {{ content.field_leader }}
      </div>
    {% endif %}
    <div class="article-body">
      <p>{{ content.body }}</p>
    </div>
  </footer>
	
	<footer>
	  {% if imageCount > 1 %}
	    {% set loopMax = imageCount -1 %}
		{% for i in 1..loopMax %}
		  <img src="{{ file_url(node.field_article_images[i].entity.field_image.entity.uri.value) }}"
        alt="{{ node.field_article_images[i].entity.field_image.entity.alt.value }}" class="img-fluid">
      <div class="img-caption">{{ node.field_article_images[i].entity.field_image_caption.value|raw }}</div>
		  <div class="img-source">{{ node.field_article_images[i].entity.field_image_source.value }}</div>
      <br><br>
		{% endfor %}
	  {% endif %}
	</footer>
</article>
